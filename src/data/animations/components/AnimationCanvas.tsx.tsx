// src/data/animations/components/AnimationCanvas.tsx (renamed from Container.tsx for clarity)

import React from 'react';
import { View } from 'react-native'; // Import View for layout
import { Canvas, runTiming, useValue, Easing } from "@shopify/react-native-skia";
import { useAnimationAPI } from '../2d/AnimationProvider'; // Adjusted path
import { AnimationRenderer } from '../core/Renderer'; // Renderer instance, not a component

interface AnimationCanvasProps {
  width: number;
  height: number;
  style?: object;
  children?: React.ReactNode; // For overlaying UI elements on top of Skia canvas
}

const rendererInstance = new AnimationRenderer(); // Create one instance

export const AnimationCanvas: React.FC<AnimationCanvasProps> = ({
  width,
  height,
  style,
  children
}) => {
  const { getPhysicsState, performanceManager } = useAnimationAPI();

  // getPhysicsState() returns a new object each time, which would cause
  // the <Canvas> children to re-evaluate constantly if used directly as a dep.
  // The `tick` from AnimationProvider serves as the trigger for re-rendering the Canvas content.
  // However, Skia's <Canvas> typically redraws when its child elements change.
  // We need to ensure the elements array passed to <Canvas> is a new array on each tick.

  const physicsState = getPhysicsState(); // Get the latest state
  const perfSettings = performanceManager.getPerformanceSettings();

  // The renderer.renderFrame will produce a new array of JSX elements
  // which Skia will use to redraw.
  const skiaElements = rendererInstance.renderFrame(physicsState, perfSettings.enableParticleTrails);

  return (
    <View style={[{ width, height }, style]}>
      <Canvas style={{ flex: 1 }}>
        {/* Render Skia elements generated by the renderer */}
        {skiaElements}
      </Canvas>
      {/* Optional: Render children (React Native components) on top of the Canvas */}
      {children && (
        <View style={{ position: 'absolute', top: 0, left: 0, width, height }}>
          {children}
        </View>
      )}
    </View>
  );
};
